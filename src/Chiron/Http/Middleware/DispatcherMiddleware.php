<?php

declare(strict_types=1);

// TODO : regarder ici : https://github.com/zendframework/zend-expressive-router/blob/master/src/Middleware/DispatchMiddleware.php

// TODO : regarder ici https://github.com/zrecore/Spark/blob/master/src/Handler/RouteHandler.php    et https://github.com/equip/framework/blob/master/src/Handler/DispatchHandler.php

// TODO : regarder ici pour l'injection de middlewares : https://github.com/swoft-cloud/swoft-framework/blob/v0.2.6/src/Middleware/Http/UserMiddleware.php#L58

//https://github.com/thephpleague/route/blob/master/src/Dispatcher.php

namespace Chiron\Http\Middleware;

use Chiron\Handler\Stack\RequestHandlerStack;
use Chiron\Routing\Route;
use Chiron\Routing\RouteResult;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

class DispatcherMiddleware implements MiddlewareInterface
{
    private $stack;

    public function __construct(RequestHandlerStack $stack)
    {
        $this->stack = $stack;
    }

    /**
     * Process a server request and return a response.
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $routeResult = $request->getAttribute(RouteResult::class);

        // if the route is not a failure, return the response generated by the route handler.
        if ($routeResult && ! $routeResult->isFailure()) {
            $route = $routeResult->getMatchedRoute();
            $middlewares = $this->gatherMiddlewares($route);

            $routeHandler = $this->stack->seed($middlewares);

            return $routeHandler->handle($request);
        }
        // else, return the default response (it's an HTTP 204 empty response).
        return $handler->handle($request);
    }

    private function gatherMiddlewares(Route $route): array
    {
        $middlewares = $route->getMiddlewareStack();

        if ($group = $route->getParentGroup()) {
            $groupMiddlewares = $group->getMiddlewareStack();
            $middlewares = array_merge($middlewares, $groupMiddlewares);
        }

        // add actual route to end of stack
        array_push($middlewares, $route);

        return $middlewares;

        /*
    // add group and route specific middleware
        if ($group = $route->getParentGroup()) {
            $this->middlewares($group->getMiddlewareStack());
        }
        $this->middlewares($route->getMiddlewareStack());
        // add actual route to end of stack
        $this->middleware($route);
        */
    }
}
