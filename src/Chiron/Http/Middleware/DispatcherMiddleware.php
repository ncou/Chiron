<?php

declare(strict_types=1);

// TODO : regarder ici : https://github.com/zendframework/zend-expressive-router/blob/master/src/Middleware/DispatchMiddleware.php

// TODO : regarder ici https://github.com/zrecore/Spark/blob/master/src/Handler/RouteHandler.php    et https://github.com/equip/framework/blob/master/src/Handler/DispatchHandler.php

// TODO : regarder ici pour l'injection de middlewares : https://github.com/swoft-cloud/swoft-framework/blob/v0.2.6/src/Middleware/Http/UserMiddleware.php#L58

//https://github.com/thephpleague/route/blob/master/src/Dispatcher.php

namespace Chiron\Http\Middleware;

use Chiron\Pipe\PipelineBuilder;
use Chiron\Routing\Route;
use Chiron\Routing\RouteResult;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

class DispatcherMiddleware implements MiddlewareInterface
{
    /** PipelineBuilder */
    private $builder;

    public function __construct(PipelineBuilder $builder)
    {
        $this->builder = $builder;
    }

    /**
     * Process a server request and return a response.
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $routeResult = $request->getAttribute(RouteResult::class);

        // if the routing is a success, return the response generated by the founded route handler.
        if ($routeResult && $routeResult->isSuccess()) {
            $routeHandler = $this->buildRouteHandler($routeResult);

            return $routeHandler->handle($request);
        }

        // else, return the default response (it's an HTTP 204 empty body response).
        return $handler->handle($request);
    }

    private function buildRouteHandler(RouteResult $routeResult): RequestHandlerInterface
    {
        // add all the route middlewares (from the Route + RouteGroup).
        $this->builder->add($routeResult->getMatchedRouteMiddlewareStack());
        // add actual RouteResult (it's a RequestHandlerInterface) at the end of stack to generate the response.
        // It will execute the route callable using the paremeters from the request uri + default parameters values.
        $this->builder->add($routeResult);

        return $this->builder->build();
    }
}
